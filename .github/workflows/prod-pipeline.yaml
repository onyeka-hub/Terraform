name: Github Actions CI/CD pipeline for Terraform
run-name: ${{ github.actor }} Running CI/CD pipeline for Terraform on production

# The workflow is configured to trigger on push and pull request events.
on:
  push:
    branches:
      - main
      - feature/*
    paths: 
      - 'Environments/prod/**'
  pull_request:
    branches:
      - main
      - feature/*
    paths: 
      - 'Environments/prod/**'

# AWS credentials and other sensitive information are securely stored using Github Secrets
env:
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    TF_VAR_region: ${{ secrets.TF_VAR_REGION }}

jobs:
  terraform:
    runs-on: self-hosted
    permissions:
      contents: read
      issues: write

    defaults:
      run:
        shell: bash
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9.3"

      - name: Setup tfsec
        uses: aquasecurity/tfsec-sarif-action@v0.1.4
        with:
          sarif_file: tfsec.sarif

      - name: Scan Terraform with TFSec
        run: |
          tfsec . -s --format json > tfsec-output.json

      - name: Show Full TFSec Output
        run: |
          echo "Full TFSec Output:"
          cat tfsec-output.json
          
      - name: Check for Critical or High TFSec Issues
        id: check_tfsec
        run: |
          CRITICAL_COUNT=$(jq '[.results[] | select(.severity == "CRITICAL")] | length' tfsec-output.json)
          HIGH_COUNT=$(jq '[.results[] | select(.severity == "HIGH")] | length' tfsec-output.json)

          echo "Critical issues found: $CRITICAL_COUNT"
          echo "High issues found: $HIGH_COUNT"

          if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$HIGH_COUNT" -gt 0 ]; then
            echo "TFSec found critical or high issues. Failing the pipeline."
            exit 1
          else
            echo "No critical or high issues found."
          fi

      - name: Check for Medium/Low TFSec Issues and Log Them
        run: |
          MEDIUM_COUNT=$(jq '[.results[] | select(.severity == "MEDIUM")] | length' tfsec-output.json)
          LOW_COUNT=$(jq '[.results[] | select(.severity == "LOW")] | length' tfsec-output.json)
      
          if [ "$MEDIUM_COUNT" -gt 0 ] || [ "$LOW_COUNT" -gt 0 ]; then
            echo "Medium issues found: $MEDIUM_COUNT"
            echo "Low issues found: $LOW_COUNT"
            jq '.results[] | select(.severity == "MEDIUM" or .severity == "LOW")' tfsec-output.json
          else
            echo "No medium or low issues found."
          fi     
          
      - name: Initialize Terraform
        working-directory: ./Environments/prod
        env:
          TF_VAR_BUCKET: ${{ secrets.TF_VAR_BUCKET_PROD }}
          TF_VAR_KEY: ${{ secrets.TF_VAR_KEY }}
          TF_VAR_REGION: ${{ secrets.TF_VAR_REGION }}
          TF_VAR_DYNAMODB_TABLE: ${{ secrets.TF_VAR_DYNAMODB_TABLE_PROD }}
          TF_VAR_ENCRYPT: ${{ secrets.TF_VAR_ENCRYPT }}
        run: terraform init -backend-config="bucket=${TF_VAR_BUCKET}" -backend-config="key=${TF_VAR_KEY}" -backend-config="region=${TF_VAR_REGION}" -backend-config="dynamodb_table=${TF_VAR_DYNAMODB_TABLE}" -backend-config="encrypt=${TF_VAR_ENCRYPT}"

      - name: Validate Terraform
        working-directory: ./Environments/prod
        run: terraform validate

    # For prod environment, the workflow only plans changes on feature branches but doesn't apply them.
      - name: Plan Terraform changes on prod
        id: plan-prod
        working-directory: ./Environments/prod
        if: github.ref != 'refs/heads/main'
        run: terraform plan -var-file=terraform.tfvars -out=plan-prod.tfplan
        
    #  This step checks if the pipeline has failed and triggers a slack notification.  
      - name: Notify Slack on Failure
        if: failure()  # Ensures the step runs only if previous steps failed
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload: |
            {
              "text": "❌ Terraform Pipeline failed in repository ${{ github.repository }} on branch ${{ github.ref_name }} (commit: ${{ github.sha }}). View details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}   
        
# The workflow ensures that terraform apply can only be executed on the main branch for production environments.
# And A manual approval step is implemented in the workflow before applying changes to production.
  deploy-to-prod:
    runs-on: self-hosted
    permissions:
      contents: read
      issues: write

    defaults:
      run:
        shell: bash

    needs: terraform
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9.3"
       
      - name: Initialize Terraform
        working-directory: ./Environments/prod
        env:
          TF_VAR_BUCKET: ${{ secrets.TF_VAR_BUCKET_PROD }}
          TF_VAR_KEY: ${{ secrets.TF_VAR_KEY }}
          TF_VAR_REGION: ${{ secrets.TF_VAR_REGION }}
          TF_VAR_DYNAMODB_TABLE: ${{ secrets.TF_VAR_DYNAMODB_TABLE_PROD }}
          TF_VAR_ENCRYPT: ${{ secrets.TF_VAR_ENCRYPT }}
        run: terraform init -backend-config="bucket=${TF_VAR_BUCKET}" -backend-config="key=${TF_VAR_KEY}" -backend-config="region=${TF_VAR_REGION}" -backend-config="dynamodb_table=${TF_VAR_DYNAMODB_TABLE}" -backend-config="encrypt=${TF_VAR_ENCRYPT}"

      - name: Validate Terraform
        working-directory: ./Environments/prod
        run: terraform validate
    
      - name: Plan Terraform changes
        working-directory: ./Environments/prod
        run: terraform plan -var-file=terraform.tfvars -out=plan-prod.tfplan

      - name: Manual Approval
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: approval
        uses: trstringer/manual-approval@v1
        with:
          approvers: darey-io, uzukwujp
          secret: ${{ secrets.GITHUB_TOKEN }}
          minimum-approvals: 1
          issue-title: "Manual approval required for afxtern Terraform pipeline"
          issue-body: |
            Workflow is pending manual review.
            URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            Required approvers: [darey-io, uzukwujp]
            Respond "approved", "approve", "lgtm", "yes" to continue workflow or "denied", "deny", "no" to cancel.

      - name: Terraform Apply
        working-directory: ./Environments/prod
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && ${{ steps.approval.outputs.approved }} == 'true'
        run: terraform apply --auto-approve plan-prod.tfplan
        
      #  This step checks if the pipeline has failed and triggers a slack notification.  
      - name: Notify Slack on Failure
        if: failure()  # Ensures the step runs only if previous steps failed
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload: |
            {
              "text": "❌ Terraform Pipeline failed in repository ${{ github.repository }} on branch ${{ github.ref_name }} (commit: ${{ github.sha }}). View details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}  
